//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Common.Model
{
    public enum TransactionCurrencyState
    {
        Active = 0,
        Inactive = 1,
    }

    /// <summary>
    /// Currency in which a financial transaction is carried out.
    /// </summary>
    public partial class TransactionCurrency : Microsoft.Xrm.Sdk.Samples.Entity, System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Default Constructor.
        /// </summary>
        public TransactionCurrency() : base(EntityLogicalName)
        {
        }

        public const string EntityLogicalName = "transactioncurrency";

        public const int EntityTypeCode = 9105;

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Unique identifier of the user who created the transaction currency.
        /// </summary>
        public Microsoft.Xrm.Sdk.Samples.EntityReference CreatedBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.EntityReference>("createdby");
            }
        }

        /// <summary>
        /// Date and time when the transaction currency was created.
        /// </summary>
        public System.Nullable<System.DateTime> CreatedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
            }
        }

        /// <summary>
        /// Unique identifier of the delegate user who created the transactioncurrency.
        /// </summary>
        public Microsoft.Xrm.Sdk.Samples.EntityReference CreatedOnBehalfBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// Name of the transaction currency.
        /// </summary>
        public string CurrencyName
        {
            get
            {
                return this.GetAttributeValue<string>("currencyname");
            }
            set
            {
                this.SetAttributeValue("currencyname", value);
                this.OnPropertyChanged("CurrencyName");
            }
        }

        /// <summary>
        /// Number of decimal places that can be used for currency.
        /// </summary>
        public System.Nullable<int> CurrencyPrecision
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("currencyprecision");
            }
            set
            {
                this.SetAttributeValue("currencyprecision", value);
                this.OnPropertyChanged("CurrencyPrecision");
            }
        }

        /// <summary>
        /// Symbol for the transaction currency.
        /// </summary>
        public string CurrencySymbol
        {
            get
            {
                return this.GetAttributeValue<string>("currencysymbol");
            }
            set
            {
                this.SetAttributeValue("currencysymbol", value);
                this.OnPropertyChanged("CurrencySymbol");
            }
        }

        /// <summary>
        /// The default image for the entity.
        /// </summary>
        public byte[] EntityImage
        {
            get
            {
                return this.GetAttributeValue<byte[]>("entityimage");
            }
            set
            {
                this.SetAttributeValue("entityimage", value);
                this.OnPropertyChanged("EntityImage");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public System.Nullable<long> EntityImage_Timestamp
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>("entityimage_timestamp");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EntityImage_URL
        {
            get
            {
                return this.GetAttributeValue<string>("entityimage_url");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        public System.Nullable<System.Guid> EntityImageId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("entityimageid");
            }
        }

        /// <summary>
        /// Exchange rate between the transaction currency and the base currency.
        /// </summary>
        public System.Nullable<decimal> ExchangeRate
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<decimal>>("exchangerate");
            }
            set
            {
                this.SetAttributeValue("exchangerate", value);
                this.OnPropertyChanged("ExchangeRate");
            }
        }

        /// <summary>
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
        public System.Nullable<int> ImportSequenceNumber
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
            }
            set
            {
                this.SetAttributeValue("importsequencenumber", value);
                this.OnPropertyChanged("ImportSequenceNumber");
            }
        }

        /// <summary>
        /// ISO currency code for the transaction currency.
        /// </summary>
        public string ISOCurrencyCode
        {
            get
            {
                return this.GetAttributeValue<string>("isocurrencycode");
            }
            set
            {
                this.SetAttributeValue("isocurrencycode", value);
                this.OnPropertyChanged("ISOCurrencyCode");
            }
        }

        /// <summary>
        /// Unique identifier of the user who last modified the transaction currency.
        /// </summary>
        public Microsoft.Xrm.Sdk.Samples.EntityReference ModifiedBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// Date and time when the transaction currency was last modified.
        /// </summary>
        public System.Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
            }
        }

        /// <summary>
        /// Unique identifier of the delegate user who last modified the transactioncurrency.
        /// </summary>
        public Microsoft.Xrm.Sdk.Samples.EntityReference ModifiedOnBehalfBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// Unique identifier of the organization associated with the transaction currency.
        /// </summary>
        public Microsoft.Xrm.Sdk.Samples.EntityReference OrganizationId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.EntityReference>("organizationid");
            }
        }

        /// <summary>
        /// Date and time that the record was migrated.
        /// </summary>
        public System.Nullable<System.DateTime> OverriddenCreatedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
            }
            set
            {
                this.SetAttributeValue("overriddencreatedon", value);
                this.OnPropertyChanged("OverriddenCreatedOn");
            }
        }

        /// <summary>
        /// Status of the transaction currency.
        /// </summary>
        public System.Nullable<Common.Model.TransactionCurrencyState> StateCode
        {
            get
            {
                Microsoft.Xrm.Sdk.Samples.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.OptionSetValue>("statecode");
                if ((optionSet != null))
                {
                    return ((Common.Model.TransactionCurrencyState)(System.Enum.ToObject(typeof(Common.Model.TransactionCurrencyState), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if ((value == null))
                {
                    this.SetAttributeValue("statecode", null);
                }
                else
                {
                    this.SetAttributeValue("statecode", new Microsoft.Xrm.Sdk.Samples.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged("StateCode");
            }
        }

        /// <summary>
        /// Reason for the status of the transaction currency.
        /// </summary>
        public Microsoft.Xrm.Sdk.Samples.OptionSetValue StatusCode
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Samples.OptionSetValue>("statuscode");
            }
            set
            {
                this.SetAttributeValue("statuscode", value);
                this.OnPropertyChanged("StatusCode");
            }
        }

        /// <summary>
        /// Unique identifier of the transaction currency.
        /// </summary>
        public System.Nullable<System.Guid> TransactionCurrencyId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("transactioncurrencyid");
            }
            set
            {
                this.SetAttributeValue("transactioncurrencyid", value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }
                this.OnPropertyChanged("TransactionCurrencyId");
            }
        }

        public override System.Guid Id
        {
            get
            {
                return base.Id;
            }
            set
            {
                this.TransactionCurrencyId = value;
            }
        }

        /// <summary>
        /// Version number of the transaction currency.
        /// </summary>
        public System.Nullable<long> VersionNumber
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
            }
        }

        /// <summary>
        /// 1:N basecurrency_organization
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.Organization> basecurrency_organization
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.Organization>("basecurrency_organization", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.Organization>("basecurrency_organization", null, value);
                this.OnPropertyChanged("basecurrency_organization");
            }
        }

        /// <summary>
        /// 1:N transactioncurrency_account
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.Account> transactioncurrency_account
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.Account>("transactioncurrency_account", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.Account>("transactioncurrency_account", null, value);
                this.OnPropertyChanged("transactioncurrency_account");
            }
        }

        /// <summary>
        /// 1:N TransactionCurrency_msdyn_expense
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.msdyn_expense> TransactionCurrency_msdyn_expense
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.msdyn_expense>("TransactionCurrency_msdyn_expense", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.msdyn_expense>("TransactionCurrency_msdyn_expense", null, value);
                this.OnPropertyChanged("TransactionCurrency_msdyn_expense");
            }
        }

        /// <summary>
        /// 1:N TransactionCurrency_msdyn_project
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.msdyn_project> TransactionCurrency_msdyn_project
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.msdyn_project>("TransactionCurrency_msdyn_project", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.msdyn_project>("TransactionCurrency_msdyn_project", null, value);
                this.OnPropertyChanged("TransactionCurrency_msdyn_project");
            }
        }

        /// <summary>
        /// 1:N TransactionCurrency_msdyn_projecttask
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.msdyn_projecttask> TransactionCurrency_msdyn_projecttask
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.msdyn_projecttask>("TransactionCurrency_msdyn_projecttask", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.msdyn_projecttask>("TransactionCurrency_msdyn_projecttask", null, value);
                this.OnPropertyChanged("TransactionCurrency_msdyn_projecttask");
            }
        }

        /// <summary>
        /// 1:N TransactionCurrency_SystemUser
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.SystemUser> TransactionCurrency_SystemUser
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.SystemUser>("TransactionCurrency_SystemUser", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.SystemUser>("TransactionCurrency_SystemUser", null, value);
                this.OnPropertyChanged("TransactionCurrency_SystemUser");
            }
        }

        /// <summary>
        /// 1:N TransactionCurrency_Task
        /// </summary>
        public System.Collections.Generic.IEnumerable<Common.Model.Task> TransactionCurrency_Task
        {
            get
            {
                return this.GetRelatedEntities<Common.Model.Task>("TransactionCurrency_Task", null);
            }
            set
            {
                this.SetRelatedEntities<Common.Model.Task>("TransactionCurrency_Task", null, value);
                this.OnPropertyChanged("TransactionCurrency_Task");
            }
        }

        /// <summary>
        /// N:1 lk_transactioncurrency_createdonbehalfby
        /// </summary>
        public Common.Model.SystemUser lk_transactioncurrency_createdonbehalfby
        {
            get
            {
                return this.GetRelatedEntity<Common.Model.SystemUser>("lk_transactioncurrency_createdonbehalfby", null);
            }
        }

        /// <summary>
        /// N:1 lk_transactioncurrency_modifiedonbehalfby
        /// </summary>
        public Common.Model.SystemUser lk_transactioncurrency_modifiedonbehalfby
        {
            get
            {
                return this.GetRelatedEntity<Common.Model.SystemUser>("lk_transactioncurrency_modifiedonbehalfby", null);
            }
        }

        /// <summary>
        /// N:1 lk_transactioncurrencybase_createdby
        /// </summary>
        public Common.Model.SystemUser lk_transactioncurrencybase_createdby
        {
            get
            {
                return this.GetRelatedEntity<Common.Model.SystemUser>("lk_transactioncurrencybase_createdby", null);
            }
        }

        /// <summary>
        /// N:1 lk_transactioncurrencybase_modifiedby
        /// </summary>
        public Common.Model.SystemUser lk_transactioncurrencybase_modifiedby
        {
            get
            {
                return this.GetRelatedEntity<Common.Model.SystemUser>("lk_transactioncurrencybase_modifiedby", null);
            }
        }

        /// <summary>
        /// N:1 organization_transactioncurrencies
        /// </summary>
        public Common.Model.Organization organization_transactioncurrencies
        {
            get
            {
                return this.GetRelatedEntity<Common.Model.Organization>("organization_transactioncurrencies", null);
            }
        }
    }
}
